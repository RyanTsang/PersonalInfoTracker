package pers.ryan.personalinfotracer.form;

import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import pers.ryan.personalinfotracer.service.PersonService;
import pers.ryan.personalinfotracer.dao.PersonDao;
import pers.ryan.personalinfotracer.dao.ipml.PersonDaoImpl;
import pers.ryan.personalinfotracer.domain.Person;

/**
 *
 * @author Ryan Tsang
 */
public class PersonalInfoTracker extends javax.swing.JFrame {
    private static int NameSize = 10;
    private static int LikeSize = 16;
    private static int DislikeSize = 16;
    private static int DOBSize = 12;
    private static Map<Integer, String> MonthMap = new HashMap<Integer, String>();
    private Person[] displayingPeople;
    private int index = 0;
    private String msg = "";
    private String openningFile = "";
    boolean isCreatingPerson = false;
    
    static{
        //Create a map to store names of each month
        MonthMap.put(0, "Jan.");
        MonthMap.put(1, "Feb.");
        MonthMap.put(2, "Mar.");
        MonthMap.put(3, "Apr.");
        MonthMap.put(4, "May");
        MonthMap.put(5, "Jun.");
        MonthMap.put(6, "Jul.");
        MonthMap.put(7, "Aug.");
        MonthMap.put(8, "Sep.");
        MonthMap.put(9, "Oct.");
        MonthMap.put(10, "Nov.");
        MonthMap.put(11, "Dec.");
    }

    public PersonalInfoTracker() {
        initComponents();
        //These two button are for creating new personal info.
        //They will be enable after click new button.
        btnSave.setVisible(false);
        btnBack.setVisible(false);
        
        //To indicate if the csv file existed 
        boolean isFileExist = false;
        //To store csv fileName and path
        String fileName = "";
        Properties p = new Properties();
        InputStream input = null;
        PersonService ps = new PersonService();
        
        try {
            input = new FileInputStream(System.getProperty("user.dir")+"/application.properties");
            // load a properties file
            p.load(input);
        } catch (IOException ex) {
            Logger.getLogger(PersonDaoImpl.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            try {
                input.close();
            } catch (IOException ex) {
                Logger.getLogger(PersonalInfoTracker.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
        
        fileName = p.getProperty("lastOpenFile");
        if(fileName == null || "".equals(fileName)){
            fileName = System.getProperty("user.dir")+"\\temp.csv";
        }
        File file = new File(fileName);
        isFileExist = file.exists();
        
        if(!isFileExist){
            fileName = System.getProperty("user.dir")+"\\temp.csv";
        }
        setLastOpenFileInPropertiesFile(fileName);
        
        lblCurrentFile.setText("Openning File:"+fileName);
        openningFile = fileName;
        
        index = 0;
        msg = "Birthday for all people";
        displayingPeople = ps.searchByName("");
        showPersonInTxtDisplay(msg, displayingPeople);
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtDisplay = new java.awt.TextArea();
        btnTop = new javax.swing.JButton();
        btnUp = new javax.swing.JButton();
        btnDown = new javax.swing.JButton();
        btnBotton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        txtSearchKeyWord = new javax.swing.JTextField();
        ckbSearchAll = new javax.swing.JCheckBox();
        btnSearch = new javax.swing.JButton();
        btnBinarySearch = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        scrMonth = new javax.swing.JScrollPane();
        lstMonth = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblLike = new javax.swing.JLabel();
        txtLike = new javax.swing.JTextField();
        lblDislike = new javax.swing.JLabel();
        txtDislike = new javax.swing.JTextField();
        lblDOB = new javax.swing.JLabel();
        txtDOB = new javax.swing.JTextField();
        btnNew = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblCurrentFile = new javax.swing.JLabel();
        btnImport = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Personal Info Tracker");

        txtDisplay.setEditable(false);
        txtDisplay.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N

        btnTop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pers/ryan/personalinfotracer/form/icon/top.png"))); // NOI18N
        btnTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTopActionPerformed(evt);
            }
        });

        btnUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pers/ryan/personalinfotracer/form/icon/up.png"))); // NOI18N
        btnUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpActionPerformed(evt);
            }
        });

        btnDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pers/ryan/personalinfotracer/form/icon/down.png"))); // NOI18N
        btnDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownActionPerformed(evt);
            }
        });

        btnBotton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pers/ryan/personalinfotracer/form/icon/botton.png"))); // NOI18N
        btnBotton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBottonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Search by name"));

        ckbSearchAll.setText("Search All");
        ckbSearchAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbSearchAllActionPerformed(evt);
            }
        });

        btnSearch.setLabel("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnBinarySearch.setText("Binary Search");
        btnBinarySearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBinarySearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtSearchKeyWord, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(ckbSearchAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(btnBinarySearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(txtSearchKeyWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckbSearchAll)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBinarySearch))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Birthdays in Month of"));

        lstMonth.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "All", "1 - Jan.", "2 - Feb.", "3 - Mar.", "4 - Apr.", "5 - May", "6 - Jun.", "7 - Jul.", "8 - Aug.", "9 - Sep.", "10 - Oct.", "11 - Nov.", "12 - Dec." };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstMonth.setName("lstMonth"); // NOI18N
        lstMonth.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstMonthValueChanged(evt);
            }
        });
        scrMonth.setViewportView(lstMonth);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrMonth, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Personal Info"));

        lblName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblName.setText("Name");

        txtName.setColumns(16);
        txtName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lblLike.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblLike.setText("Like");

        txtLike.setColumns(16);
        txtLike.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lblDislike.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblDislike.setText("Dislike");

        txtDislike.setColumns(16);
        txtDislike.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lblDOB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblDOB.setText("DOB");

        txtDOB.setColumns(16);
        txtDOB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDel.setText("Delete");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lblLike)
                        .addGap(31, 31, 31)
                        .addComponent(txtLike, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lblName)
                        .addGap(19, 19, 19)
                        .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDislike)
                            .addComponent(lblDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDislike, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNew, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtLike, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLike))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDislike, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDislike))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDOB)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnBack))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDel)
                        .addGap(22, 22, 22)
                        .addComponent(btnSave)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblCurrentFile.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        btnImport.setText("Import");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        btnExport.setText("Export");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnTop, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnUp, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnDown, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnBotton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnImport)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnExport))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(lblCurrentFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCurrentFile, javax.swing.GroupLayout.DEFAULT_SIZE, 15, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImport)
                    .addComponent(btnExport))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnTop, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUp, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDown, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBotton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ckbSearchAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbSearchAllActionPerformed
        txtSearchKeyWord.setEnabled(!ckbSearchAll.isSelected());
    }//GEN-LAST:event_ckbSearchAllActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        PersonService ps = new PersonService();
        index = 0;
        String keyWord = "";
        
        if(!ckbSearchAll.isSelected()){
            keyWord = txtSearchKeyWord.getText();
        }
        lstMonth.setSelectedIndex(0);
        displayingPeople = ps.searchByName(keyWord);
        msg = "Birthday for " + ((!"".equals(keyWord))?("those names contain '"+ keyWord)+"'":"all people");
        showPersonInTxtDisplay(msg, displayingPeople);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void lstMonthValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstMonthValueChanged
        int month = lstMonth.getSelectedIndex() - 1;
        PersonService ps = new PersonService();
        index = 0;
        if(month == - 1){
            msg = "Birthday for all people";
            showPersonInTxtDisplay(msg, ps.searchByName(""));
        }else{
            msg = "Birthday for the month of "+ (month+1)+ " - "+ MonthMap.get(month);
            showPersonInTxtDisplay(msg, ps.searchByMonthOfDob(month));
        }
    }//GEN-LAST:event_lstMonthValueChanged

    private void btnTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTopActionPerformed
        selectPerson(0);
    }//GEN-LAST:event_btnTopActionPerformed

    private void btnUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpActionPerformed
        selectPerson(1);
    }//GEN-LAST:event_btnUpActionPerformed

    private void btnDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownActionPerformed
        selectPerson(2);
    }//GEN-LAST:event_btnDownActionPerformed

    private void btnBottonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBottonActionPerformed
        selectPerson(3);
    }//GEN-LAST:event_btnBottonActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        isCreatingPerson = true;
        txtName.setText("");
        txtLike.setText("");
        txtDislike.setText("");
        txtDOB.setText("");
        JOptionPane.showMessageDialog(this, "New personal info should follow below rules:\n1. Name can not contain ','.\n2. Like and Dislike can contain multiple items, using ',' as separator. (e.g. Coding,Swimming).\n3. DOB format should be dd/MM/yyyy (e.g. 13/07/1990).");
        setVisibleOfButtons(1);
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        if(displayingPeople == null || displayingPeople.length < 1){
            return;
        }
        PersonService ps = new PersonService();
        ps.delPerson(displayingPeople[index]);
        Person[] newDisplayPeople = new Person[displayingPeople.length-1];
        for(int i = 0, j=0; i < newDisplayPeople.length; i++, j++){
            if(displayingPeople[j] == displayingPeople[index]){
                j++;
            }
            newDisplayPeople[i] = displayingPeople[j];
        }
        displayingPeople = newDisplayPeople;
        if(index >= displayingPeople.length && index > 0){
            index --;
        }
        showPersonInTxtDisplay(msg, displayingPeople);
    }//GEN-LAST:event_btnDelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        Person p = new Person();
        PersonService ps = new PersonService();
        
        String name = txtName.getText();
        Date dob = null;
        try {
            if(name.contains(",")){
                throw new RuntimeException("Person name can not contain ',' , please try again.");
            }
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            dob = sdf.parse(txtDOB.getText());
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "DOB format should be dd/MM/yyyy");
            return;
        } catch (RuntimeException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            return;
        } 
        p.setName(name);
        p.setLikes(txtLike.getText().split(","));
        p.setDislikes(txtDislike.getText().split(","));
        p.setDOB(dob);
        ps.addPerson(p);
        setVisibleOfButtons(0);
        
        index = 0;
        lstMonth.setSelectedIndex(0);
        msg = "Birthday for all people";
        displayingPeople = ps.searchByName("");
        showPersonInTxtDisplay(msg, displayingPeople);
        isCreatingPerson = false;
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        isCreatingPerson = false;
        setVisibleOfButtons(0);
        showPersonInTxtDisplay(msg, displayingPeople);
        updatePersonInfo();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if(displayingPeople == null || displayingPeople.length < 1){
            return;
        }
        Person p = displayingPeople[index];
        PersonService ps = new PersonService();
        String name = txtName.getText();
        Date dob = null;
        //verify data
        try {
            if(name.contains(",")){
                throw new RuntimeException("Person name can not contain ',' , please try again.");
            }
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            dob = sdf.parse(txtDOB.getText());
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "DOB format should be dd/MM/yyyy");
            return;
        } catch (RuntimeException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            return;
        } 
        //submit
        p.setName(name);
        p.setLikes(txtLike.getText().split(","));
        p.setDislikes(txtDislike.getText().split(","));
        p.setDOB(dob);
        ps.updatePerson(p);
        
        index = 0;
        msg = "Birthday for all people";
        showPersonInTxtDisplay(msg, ps.searchByName(""));
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        String fileName = "";
        File file = new File(openningFile);
        Properties p = new Properties();
        PersonService ps = new PersonService();
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setSelectedFile(file);
        FileNameExtensionFilter filter = new FileNameExtensionFilter( "CSV files (*csv)", "csv");
        fileChooser.setFileFilter(filter);
        if(fileChooser.showDialog(this, null) == JFileChooser.APPROVE_OPTION) {
            fileName = fileChooser.getSelectedFile().getPath();
            p.setProperty("lastOpenFile", fileName);
            File propertiesFile = new File(System.getProperty("user.dir")+"/application.properties");
            OutputStream out;
            try {
                out = new FileOutputStream( propertiesFile );
                p.store(out, "Properties create at: " + new Date());
            } catch (Exception ex) {
                Logger.getLogger(PersonalInfoTracker.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            lstMonth.setSelectedIndex(0);
            displayingPeople = ps.searchByName("");
            msg = "Birthday for all people";
            showPersonInTxtDisplay(msg, displayingPeople);
            lblCurrentFile.setText("Openning File:"+fileName);
            openningFile = fileName;
        }
        
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        String fileName = "";
        File file = new File(openningFile);
        Properties p = new Properties();
        PersonService ps = new PersonService();
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setSelectedFile(file);
        FileNameExtensionFilter filter = new FileNameExtensionFilter( "CSV files (*csv)", "csv");
        fileChooser.setFileFilter(filter);
        if(fileChooser.showDialog(this, "Save") == JFileChooser.APPROVE_OPTION) {
            fileName = fileChooser.getSelectedFile().getPath();
            p.setProperty("lastOpenFile", fileName);
            File propertiesFile = new File(System.getProperty("user.dir")+"/application.properties");
            OutputStream out;
            try {
                out = new FileOutputStream( propertiesFile );
                p.store(out, "Properties create at: " + new Date());
            } catch (Exception ex) {
                Logger.getLogger(PersonalInfoTracker.class.getName()).log(Level.SEVERE, null, ex);
            }
            lblCurrentFile.setText("Openning File:"+fileName);
            openningFile = fileName;
            
            ps.saveAllPeople(displayingPeople);
        }
    }//GEN-LAST:event_btnExportActionPerformed

    private void btnBinarySearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBinarySearchActionPerformed
        Arrays.sort(displayingPeople);        
        Person p = new Person();
        p.setName(txtSearchKeyWord.getText());
        int resultIndex = Arrays.binarySearch(displayingPeople, p);
        if(resultIndex >= 0){
            index = resultIndex;
            String msg = "";
            showPersonInTxtDisplay(msg, displayingPeople);
            updatePersonInfo();
        }else{
            JOptionPane.showMessageDialog(this, "No matched result.");
        }
    }//GEN-LAST:event_btnBinarySearchActionPerformed

    private void showPersonInTxtDisplay(String msg, Person[] people){
        boolean isEmptyPeople = displayingPeople == null || displayingPeople.length < 1;
        displayingPeople = people;

        String text = "";
        txtDisplay.setText("");
        
        if(isEmptyPeople){
            text += (msg + "\n\n");
            text += "   |" + fillSpace("Name", NameSize) + "|" + fillSpace("Like", LikeSize)+ "|" + fillSpace("Dislike", DislikeSize)+ "|"+fillSpace("DOB", DOBSize)+"|\n";
            text += "--------------------------------------------------------------\n";
        }else{
            //Start check the max length of each properties
            for(Person p: people){
                String likeString = "";
                String dislikeString = "";
                for(String item: p.getLikes()){
                likeString += (item+",");
                }
                likeString = likeString.substring(0, likeString.length()-1);
                for(String item: p.getDislikes()){
                dislikeString += (item+",");
                }
                dislikeString = dislikeString.substring(0, dislikeString.length()-1);
                if(p.getName().length()>NameSize){
                    NameSize = p.getName().length();
                }
                if(likeString.length()>LikeSize){
                    LikeSize = likeString.length();
                }
                if(dislikeString.length()>DislikeSize){
                    DislikeSize = dislikeString.length();
                }
            }
            //End check the max length of each properties
            text += (msg + "\n\n");
            text += "   |" + fillSpace("Name", NameSize) + "|" + fillSpace("Like", LikeSize)+ "|" + fillSpace("Dislike", DislikeSize)+ "|"+fillSpace("DOB", DOBSize)+"|\n";
            text += "   ";
            for(int i =0; i < NameSize + LikeSize + DislikeSize + DOBSize + 5; i++){
                text += "-";
            }
            text += "\n";
            for(int i = 0; i < people.length; i++){
                Person p = people[i]; 
                if(i == index){
                    text += ">>>|";
                }else{
                    text += "   |";
                }
                text += fillSpace(p.getName(), NameSize) + "|" + fillSpace(p.getLikes(), LikeSize)+ "|" + fillSpace(p.getDislikes(), DislikeSize)+ "|"+fillSpace(p.getDOB(), DOBSize)+"|\n";
            }
        }
        txtDisplay.setText(text);
        updatePersonInfo();
    }
    
    private String fillSpace(String s, int length){
        int num = length - s.length();
        for(int i = 0; i < num; i++){
            s += " ";
        }
        return s;
    }
    
    private String fillSpace(String[] s, int length){
        String string = "";
        for(String item: s){
            string += (item+",");
        }
        string = string.substring(0, string.length()-1);
        
        int num = length - string.length();
        for(int i = 0; i < num; i++){
            string += " ";
        }
        return string;
    }
    
    private String fillSpace(Date date, int length){
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        String stringDate = sdf.format(date);
        String result = stringDate;
        int num = length - stringDate.length();
        for(int i = 0; i < num; i++){
            result += " ";
        }
        return result;
    }
    
    private void updatePersonInfo(){
        if(isCreatingPerson == false){
            if(displayingPeople == null || displayingPeople.length < 1){
                txtName.setText("");
                txtLike.setText("");
                txtDislike.setText("");
                txtDOB.setText("");
            }else{
                txtName.setText(displayingPeople[index].getName());
                String likeString = "";
                String DislikeString = "";
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                for(String item: displayingPeople[index].getLikes()){
                    likeString += (item+",");
                }
                likeString = likeString.substring(0, likeString.length()-1);
                txtLike.setText(likeString);
                for(String item: displayingPeople[index].getDislikes()){
                    DislikeString += (item+",");
                }
                DislikeString = DislikeString.substring(0, DislikeString.length()-1);
                txtDislike.setText(DislikeString);
                txtDOB.setText(sdf.format(displayingPeople[index].getDOB()));
            }
        }
    }
    
    private void selectPerson(int i){
        if(displayingPeople != null){
            switch (i){
                case 0: index = 0;
                        break;
                case 1: if(index > 0)index --;
                        break;
                case 2: if(index < displayingPeople.length-1)index ++;
                        break;
                case 3: index = (displayingPeople.length-1);
                        break;
            }
            showPersonInTxtDisplay(msg, displayingPeople);
        }

    }
    /***
     * Set lastOpenFile property in application.properties file
     * @param fileName 
     */
    private void setLastOpenFileInPropertiesFile(String fileName){
        Properties p = new Properties();
        p.setProperty("lastOpenFile", fileName);
        File propertiesFile = new File(System.getProperty("user.dir")+"/application.properties");
        OutputStream out;
        try {
            out = new FileOutputStream( propertiesFile );
            p.store(out, "Properties create at: " + new Date());
        } catch (Exception ex) {
            Logger.getLogger(PersonalInfoTracker.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /***
     * if i == 0, means default display mode.
     * if i != 0,  means new person display mode.
     * @param i 
     */
    private void setVisibleOfButtons(int i){
        boolean flag = false;
        if(i == 0){
            flag = true;
        }
        btnNew.setVisible(flag);
        btnUpdate.setVisible(flag);
        btnDel.setVisible(flag);
        btnSave.setVisible(!flag);
        btnBack.setVisible(!flag);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PersonalInfoTracker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PersonalInfoTracker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PersonalInfoTracker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PersonalInfoTracker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PersonalInfoTracker().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBinarySearch;
    private javax.swing.JButton btnBotton;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnDown;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnTop;
    private javax.swing.JButton btnUp;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JCheckBox ckbSearchAll;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblCurrentFile;
    private javax.swing.JLabel lblDOB;
    private javax.swing.JLabel lblDislike;
    private javax.swing.JLabel lblLike;
    private javax.swing.JLabel lblName;
    private javax.swing.JList lstMonth;
    private javax.swing.JScrollPane scrMonth;
    private javax.swing.JTextField txtDOB;
    private javax.swing.JTextField txtDislike;
    private java.awt.TextArea txtDisplay;
    private javax.swing.JTextField txtLike;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSearchKeyWord;
    // End of variables declaration//GEN-END:variables
}
